; --------------------------------------------------------
; Notes
; --------------------------------------------------------

;  Groth16 is a specific zk-SNARK construction that enables one party (the prover) to prove to another party (the verifier) that a
;  statement is true without revealing any information beyond the validity of the statement itself. 
;  Here's a brief overview of each component:

;  Public Inputs: These are values related to the computation or statement being proven, which are known both to the prover 
;                 and the verifier. These public inputs are necessary for the verification process. They are used alongside 
;                 the proof (a, b, c) to verify that the prover has correctly performed a computation without revealing the 
;                 specific details of that computation.

;  a, b, and c:   Each of these elements represent a point on an elliptic curve, and together they comprise the zk-SNARK proof 
;                 provided by the prover to the verifier.

;  Verification Process: The Groth16 verifier uses these elements (a, b, c, along with the public_values) to perform a 
;                        bilinear pairing check. This cryptographic operation confirms that the prover knows a witness (
;                        a set of inputs) that satisfies the statement being proven without revealing the witness itself. 
;                        The check involves complex mathematical operations on elliptic curves and bilinear pairings, 
;                        to ensure the proof's validity.

; --------------------------------------------------------
; Test Cases
; --------------------------------------------------------

; [✔] Verify | Valid proof
; [✗] Verify | Invalid proof | Invalid public values
; [✗] Verify | Invalid proof | Invalid a point
; [✗] Verify | Invalid proof | Invalid b point
; [✗] Verify | Invalid proof | Invalid c point

(define-namespace 'free (sig-keyset) (sig-keyset))
(env-data 
    { 'ns: 'free 
    , "user1" : ["user1-keys"]
    }
)

(load "../src/lib-3x2.repl")

(define-keyset "free.opact-admin" (read-keyset "user1"))

(env-gasmodel "table")
(env-gaslimit 150000)
(env-gas 0)

; [✔] Verify | Valid proof

(expect "verify" {"paired": true} (verify 
    {
        "public_values":[5097715052237145403753365704898254467169137625210256492956965949270430045 10350054029334029104721836436197614298271599814974025951759768887472959204491 8880212327543797734391566362872821399417931236479047492409675925327395362024 6744756488845918878339475731082062348289674403192928430312475229224416054163 11447887161685273325229383682033758855034454108223333399257174474224042460477 20085879863141481154416816762505004939695895115007481593493468713550477118072 1491673331617618272981045375721765540778861924763498414377149116092375404182 1409566157580977860959833662881925553878710509003 1076349462536313652575937474535332016951960024124 814843937149388495664711784579302082226637396667434303269754721330180190802],
        "a":{"x":17901042678392254749009477662444348028409443811053697007027715576663992903799,"y":17048225545256157163674902826671998880176775729930869352951888784634602972577},
        "b":{"x":[4434085511194832277146281817017632276264964685517905758544892252867374596754 18032823362937264937199773264971671344432187031187091034703593895639367647694],
             "y":[9439696666055659947675970120722790572303540575063261557626202383522078275740 20091390898922485508524257678012892745061123293603606701407411013078735614039]},
        "c":{"x":17910219481298589721088687155746307889801437978994146636715821557888886556540,"y":3644328300856086571465919298625535607457024633955676512087523130907764371638}
    }
))

; [✗] Verify | Invalid proof | Invalid public values
; if a change any part of the proof, the verification will fail
; in this next example, I change the first number in the public_values array, from 5 to 6
; with this change, the proof is no longer valid
; this is important to note that in this example, the transaction will not fail, but the verification will return false

(expect "invalid public value" {"paired": false} (verify 
    {
        "public_values":[6097715052237145403753365704898254467169137625210256492956965949270430045 10350054029334029104721836436197614298271599814974025951759768887472959204491 8880212327543797734391566362872821399417931236479047492409675925327395362024 6744756488845918878339475731082062348289674403192928430312475229224416054163 11447887161685273325229383682033758855034454108223333399257174474224042460477 20085879863141481154416816762505004939695895115007481593493468713550477118072 1491673331617618272981045375721765540778861924763498414377149116092375404182 1409566157580977860959833662881925553878710509003 1076349462536313652575937474535332016951960024124 814843937149388495664711784579302082226637396667434303269754721330180190802],
        "a":{"x":17901042678392254749009477662444348028409443811053697007027715576663992903799,"y":17048225545256157163674902826671998880176775729930869352951888784634602972577},
        "b":{"x":[4434085511194832277146281817017632276264964685517905758544892252867374596754 18032823362937264937199773264971671344432187031187091034703593895639367647694],
             "y":[9439696666055659947675970120722790572303540575063261557626202383522078275740 20091390898922485508524257678012892745061123293603606701407411013078735614039]},
        "c":{"x":17910219481298589721088687155746307889801437978994146636715821557888886556540,"y":3644328300856086571465919298625535607457024633955676512087523130907764371638}
    }
))

; [✗] Verify | Invalid proof | Invalid a point
; i will do the same with the a point, changing the x value

(expect-failure "invalid a point" "Point not on curve" (verify 
    {
        "public_values":[5097715052237145403753365704898254467169137625210256492956965949270430045 10350054029334029104721836436197614298271599814974025951759768887472959204491 8880212327543797734391566362872821399417931236479047492409675925327395362024 6744756488845918878339475731082062348289674403192928430312475229224416054163 11447887161685273325229383682033758855034454108223333399257174474224042460477 20085879863141481154416816762505004939695895115007481593493468713550477118072 1491673331617618272981045375721765540778861924763498414377149116092375404182 1409566157580977860959833662881925553878710509003 1076349462536313652575937474535332016951960024124 814843937149388495664711784579302082226637396667434303269754721330180190802],
        "a":{"x":27901042678392254749009477662444348028409443811053697007027715576663992903799,"y":17048225545256157163674902826671998880176775729930869352951888784634602972577},
        "b":{"x":[4434085511194832277146281817017632276264964685517905758544892252867374596754 18032823362937264937199773264971671344432187031187091034703593895639367647694],
             "y":[9439696666055659947675970120722790572303540575063261557626202383522078275740 20091390898922485508524257678012892745061123293603606701407411013078735614039]},
        "c":{"x":17910219481298589721088687155746307889801437978994146636715821557888886556540,"y":3644328300856086571465919298625535607457024633955676512087523130907764371638}
    }
))

; [✗] Verify | Invalid proof | Invalid b point
; now, I will change the b point, changing the x value

(expect-failure "invalid b point" "Point not on curve" (verify 
    {
        "public_values":[5097715052237145403753365704898254467169137625210256492956965949270430045 10350054029334029104721836436197614298271599814974025951759768887472959204491 8880212327543797734391566362872821399417931236479047492409675925327395362024 6744756488845918878339475731082062348289674403192928430312475229224416054163 11447887161685273325229383682033758855034454108223333399257174474224042460477 20085879863141481154416816762505004939695895115007481593493468713550477118072 1491673331617618272981045375721765540778861924763498414377149116092375404182 1409566157580977860959833662881925553878710509003 1076349462536313652575937474535332016951960024124 814843937149388495664711784579302082226637396667434303269754721330180190802],
        "a":{"x":17901042678392254749009477662444348028409443811053697007027715576663992903799,"y":17048225545256157163674902826671998880176775729930869352951888784634602972577},
        "b":{"x":[5434085511194832277146281817017632276264964685517905758544892252867374596754 18032823362937264937199773264971671344432187031187091034703593895639367647694],
             "y":[9439696666055659947675970120722790572303540575063261557626202383522078275740 20091390898922485508524257678012892745061123293603606701407411013078735614039]},
        "c":{"x":17910219481298589721088687155746307889801437978994146636715821557888886556540,"y":3644328300856086571465919298625535607457024633955676512087523130907764371638}
    }
))

; [✗] Verify | Invalid proof | Invalid c point
; finally, I will change the c point, changing the x value

(expect-failure "invalid c point" "Point not on curve" (verify 
    {
        "public_values":[5097715052237145403753365704898254467169137625210256492956965949270430045 10350054029334029104721836436197614298271599814974025951759768887472959204491 8880212327543797734391566362872821399417931236479047492409675925327395362024 6744756488845918878339475731082062348289674403192928430312475229224416054163 11447887161685273325229383682033758855034454108223333399257174474224042460477 20085879863141481154416816762505004939695895115007481593493468713550477118072 1491673331617618272981045375721765540778861924763498414377149116092375404182 1409566157580977860959833662881925553878710509003 1076349462536313652575937474535332016951960024124 814843937149388495664711784579302082226637396667434303269754721330180190802],
        "a":{"x":17901042678392254749009477662444348028409443811053697007027715576663992903799,"y":17048225545256157163674902826671998880176775729930869352951888784634602972577},
        "b":{"x":[4434085511194832277146281817017632276264964685517905758544892252867374596754 18032823362937264937199773264971671344432187031187091034703593895639367647694],
             "y":[9439696666055659947675970120722790572303540575063261557626202383522078275740 20091390898922485508524257678012892745061123293603606701407411013078735614039]},
        "c":{"x":27910219481298589721088687155746307889801437978994146636715821557888886556540,"y":3644328300856086571465919298625535607457024633955676512087523130907764371638}
    }
))

(print {"Total gas": (env-gas)})
(env-gas 0)

; [✔] Verify | Valid proof

(expect "verify" {"paired": true} (verify 
    {
        "public_values":[6549528558437796551109796215651469590577289298285154522446750263957848217990 9340507213909893570075533458249420519277410455902050647058477812654729690871 3836484959209379530897253280930481664044991636501750449284507664334663619803 3310042387063546051694339821566389833437850998173760495616000858241156362449 13924262072728720917501484489183006849613902356672750964253617819963275417535 17331021142945595148003703207469365834071507571641831262582918266535631794863 7486776175838865209771455585678644242478266678596657713703262325949588930608 1454133245195396932460760613671278372813553831461 1200174454565686355742945407856392826315842700977 4592424182211517880640117801487621447541670828836116903220358463876373231471],
        "a":{"x":12164292933485601233815401389865865768076956758778525696943986049330812280811,"y":148156805490929500155342626819885615932831719484138700821655809730274224518},
        "b":{"x":[8565763447153129650963651970913324634102820393585688003808392088532410551486 4057642463456610909530169451152346322741370436053630738073125029089918919051],
            "y":[5139674024656230324954454149962948460713552941439408421556823687316849103099 2787615627075675709229748956401315674998600271044382362867289040397766488473]},
        "c":{"x":11973567014970121358007049185582855204989331702222051249273563650100952584514,"y":12157157589678748850774352572000384256255550701141155806931747671010347592989}
    }
))