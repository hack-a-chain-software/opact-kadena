(namespace (read-msg 'ns))

(module groth16-2x2 GOVERNANCE
    @doc
    "This module implements Groth16 zk-SNARKs (Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) verification. \
    \ It dynamically names the module based on the number of public inputs. \
    \ The module includes definitions for G1 and G2 points on an elliptic curve, a verifier structure, \
    \ and a proof structure. It also provides functions to verify zk-SNARKs proofs."

    (defcap GOVERNANCE ()
        @doc 
        "Governance capability to enforce specific administrative privileges. \
        \ It ensures that only authorized keysets can perform critical operations within the module."
     
        (enforce-keyset "free.opact-admin")
    )

    (defschema G1Point
        @doc
        "Structure representing a G1 point in an elliptic curve, consisting of x and y coordinates as integers. \
        \ G1 points are used in various cryptographic operations within the zk-SNARKs protocol."
   
        x: integer
        y: integer
    )
    
    (defschema G2Point
        @doc
        "Structure representing a G2 point in an elliptic curve. G2 points are similar to G1 points but require arrays \
        \ of integers for coordinates to accommodate the complexity and size of the data involved in zk-SNARKs."
       
        x: [integer]
        y: [integer]
    )

    (defschema Verifier
        @doc 
        "Structure representing the verifier in zk-SNARKs. \
        \ It includes the number of public inputs, points alfa1, beta2, gamma2, \
        \ delta2 in G1 or G2, an array of G1 points for input consistency (ic), and the snark scalar field."
      
        n_public: integer
        alfa1: object{G1Point}
        beta2: object{G2Point}
        gamma2: object{G2Point}
        delta2: object{G2Point}
        ic: [object{G1Point}]
        snark_scalar_field: integer
    )

    (defschema Proof
        @doc 
        "Structure representing a proof in zk-SNARKs. \
        \ It includes an array of public values and points a, b, and c in G1 or G2."
        public_values: [integer]
        a: object{G1Point}
        b: object{G2Point}
        c: object{G1Point}
    )

    (defun verify (proof:object{Proof})
        @doc 
        "Structure representing a proof in zk-SNARKs. It comprises the public values and points a, b, and c in G1 or G2 forms. \
        \ This structure is used to encapsulate the proof data that needs to be verified using the Groth16 verification algorithm."
      
        (
            let* 
            (
                (input (at 'public_values proof))
                (enforce (+ (length input) 1) "verifier-bas-input")
                
                (verifier_init 
                    { 
                        "n_public": 9,
                        "alfa1": { "x": 19585229621408861241979089483891340022980560671819105963109956904101022953913, "y": 17683889819663003197107728572179825117093108995628430167242695730269218995449 },
                        "beta2": { "x": [5918189778294398373867215857077657485085144687386129296042139262418695375465 11815681884459819136775466292413961857142768070519748123365539964381646088673], "y": [16256495067915955788372634108963148989989955099312959915110410844897734263002 17272844284718878797026118469560524097391792914946780395473367380843919101959] },
                        "gamma2": { "x": [10857046999023057135944570762232829481370756359578518086990519993285655852781 11559732032986387107991004021392285783925812861821192530917403151452391805634], "y": [8495653923123431417604973247489272438418190587263600148770280649306958101930 4082367875863433681332203403145435568316851327593401208105741076214120093531] },
                        "delta2": { "x": [19162921808072886987694313561210399982887236957543951585994388070992540940881 15342871478941735783937553535197179581658659526848178272101453436458651534508], "y": [17319460092141331704806583233841848111798084341646902601173040253830644204817 13804218979801538516984688287376270396100603801974418586551470776873670548192] },
                        "ic": [
                                { "x": 6874618033930295945731382415377288924794096648436393334714816792856374577248, "y": 21117756819416567906864939673149463417350986299758038001934068423251553436310 },
                                { "x": 1443419544753073246474082290438219828855845397902513611754790371910524080032, "y": 3638061389256994203039210802307228475311946858956606404818126979568099161294 },
                                { "x": 11151717620026250737062756118125667005574148409790122435830325664131588683071, "y": 12032779056705031606446519260164694538114832772875739799018577052506092705840 },
                                { "x": 6675821321432441870884621527141463700796819869865858887327489504583530863137, "y": 12686830531491748030255882200848750194446160567848093248265516624937798878167 },
                                { "x": 18557714748221232539599332772543700187742725542019858473351686936064321725111, "y": 6545985414934136199698013139157099337855183882011770070016635530925664212861 },
                                { "x": 2607905123932851935976215844310725682404462203495826611133680620204914507676, "y": 16740260858461988295103803027064102581677817500450599001588162668035047200396 },
                                { "x": 17822368172763260955817867056701603925521612955825741477570746967571463058796, "y": 18778620829800051026823110702062674262213669763133772081872428755763866281889 },
                                { "x": 21873016902541284808982700783213577642240388622137887671921116303756384206076, "y": 7663089608612242538192554012305147578163118126353882566190345763976518006472 },
                                { "x": 1614506642443708545599901712028456877293216603332089577659031485861477766753, "y": 11038980610463212079293046707983155065824263405005290416539015066765436511867 },
                                { "x": 12505022866666518688325938657229327864998296596385868865835458828511259995211, "y": 19000998318917324078610899843929172806837385916000150815934517082608763202580 }
                        ],
                        "snark_scalar_field": 21888242871839275222246405745257275088548364400416034343698204186575808495617
                    }
                )

                (vk_x { "x": 0, "y": 0 })
                (ic_0 (at 0 (at 'ic verifier_init)))
                (vk_x_0 (point-add 'g1 vk_x ic_0))
                (snark_scalar_field (at 'snark_scalar_field verifier_init))

                
                    (input_1 (at 0 input))
                    (enforce (< input_1 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_1 (at 1 (at 'ic verifier_init)))
                    (vk_y_1 (scalar-mult 'g1 ic_1 input_1))
                    (vk_x_1 (point-add 'g1 vk_x_0 vk_y_1))
                
                    (input_2 (at 1 input))
                    (enforce (< input_2 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_2 (at 2 (at 'ic verifier_init)))
                    (vk_y_2 (scalar-mult 'g1 ic_2 input_2))
                    (vk_x_2 (point-add 'g1 vk_x_1 vk_y_2))
                
                    (input_3 (at 2 input))
                    (enforce (< input_3 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_3 (at 3 (at 'ic verifier_init)))
                    (vk_y_3 (scalar-mult 'g1 ic_3 input_3))
                    (vk_x_3 (point-add 'g1 vk_x_2 vk_y_3))
                
                    (input_4 (at 3 input))
                    (enforce (< input_4 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_4 (at 4 (at 'ic verifier_init)))
                    (vk_y_4 (scalar-mult 'g1 ic_4 input_4))
                    (vk_x_4 (point-add 'g1 vk_x_3 vk_y_4))
                
                    (input_5 (at 4 input))
                    (enforce (< input_5 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_5 (at 5 (at 'ic verifier_init)))
                    (vk_y_5 (scalar-mult 'g1 ic_5 input_5))
                    (vk_x_5 (point-add 'g1 vk_x_4 vk_y_5))
                
                    (input_6 (at 5 input))
                    (enforce (< input_6 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_6 (at 6 (at 'ic verifier_init)))
                    (vk_y_6 (scalar-mult 'g1 ic_6 input_6))
                    (vk_x_6 (point-add 'g1 vk_x_5 vk_y_6))
                
                    (input_7 (at 6 input))
                    (enforce (< input_7 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_7 (at 7 (at 'ic verifier_init)))
                    (vk_y_7 (scalar-mult 'g1 ic_7 input_7))
                    (vk_x_7 (point-add 'g1 vk_x_6 vk_y_7))
                
                    (input_8 (at 7 input))
                    (enforce (< input_8 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_8 (at 8 (at 'ic verifier_init)))
                    (vk_y_8 (scalar-mult 'g1 ic_8 input_8))
                    (vk_x_8 (point-add 'g1 vk_x_7 vk_y_8))
                
                    (input_9 (at 8 input))
                    (enforce (< input_9 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_9 (at 9 (at 'ic verifier_init)))
                    (vk_y_9 (scalar-mult 'g1 ic_9 input_9))
                    (vk_x_9 (point-add 'g1 vk_x_8 vk_y_9))
                
                (a1 (negate (at 'a proof)))
                (a2 (at 'b proof))
                (b1 (at 'alfa1 verifier_init))
                (b2 (at 'beta2 verifier_init))
                (c1 vk_x_9)
                (c2 (at 'gamma2 verifier_init))
                (d1 (at 'c proof))
                (d2 (at 'delta2 verifier_init))
            )
            (check-pairing a1 a2 b1 b2 c1 c2 d1 d2)
        )   
    )

    (defun negate(p:object{G1Point})
        @doc
        "Function to negate a G1 point, a common operation in elliptic curve cryptography. \
        \ It takes a G1 point and returns its negation. This function is used within the verification process."

        (
            let*
            (
                (q 21888242871839275222246405745257275088696311157297823662689037894645226208583)
                (x (at 'x p))
                (y (at 'y p))
            )
            (if (= p {"x": 0, "y": 0})
                {"x": 0, "y": 0}
                {"x": x, "y": (- q (mod y q))}
            )
        )
    )

    (defun check-pairing(a1:object{G1Point} a2:object{G2Point} b1:object{G1Point} b2:object{G2Point} c1:object{G1Point} c2:object{G2Point} d1:object{G1Point} d2:object{G2Point})
        @doc 
        "Function to perform a pairing check, a core component of zk-SNARKs verification. \
        \ It involves checking the mathematical relationships between pairs of G1 and G2 points, \
        \ which is used to ensure the validity of a zk-SNARKs proof."
     
        (
            let*
            (
                (p1 [a1 b1 c1 d1])
                (p2 [a2 b2 c2 d2])
                (paired (pairing-check p1 p2))
            )
            {
                "paired": paired
            }
        )
    )
)