(namespace (read-msg 'ns))

(module groth16-5x2 GOVERNANCE
    @doc
    "This module implements Groth16 zk-SNARKs (Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) verification. \
    \ It dynamically names the module based on the number of public inputs. \
    \ The module includes definitions for G1 and G2 points on an elliptic curve, a verifier structure, \
    \ and a proof structure. It also provides functions to verify zk-SNARKs proofs."

    (defcap GOVERNANCE ()
        @doc 
        "Governance capability to enforce specific administrative privileges. \
        \ It ensures that only authorized keysets can perform critical operations within the module."
     
        (enforce-keyset "free.opact-admin")
    )

    (defschema G1Point
        @doc
        "Structure representing a G1 point in an elliptic curve, consisting of x and y coordinates as integers. \
        \ G1 points are used in various cryptographic operations within the zk-SNARKs protocol."
   
        x: integer
        y: integer
    )
    
    (defschema G2Point
        @doc
        "Structure representing a G2 point in an elliptic curve. G2 points are similar to G1 points but require arrays \
        \ of integers for coordinates to accommodate the complexity and size of the data involved in zk-SNARKs."
       
        x: [integer]
        y: [integer]
    )

    (defschema Verifier
        @doc 
        "Structure representing the verifier in zk-SNARKs. \
        \ It includes the number of public inputs, points alfa1, beta2, gamma2, \
        \ delta2 in G1 or G2, an array of G1 points for input consistency (ic), and the snark scalar field."
      
        n_public: integer
        alfa1: object{G1Point}
        beta2: object{G2Point}
        gamma2: object{G2Point}
        delta2: object{G2Point}
        ic: [object{G1Point}]
        snark_scalar_field: integer
    )

    (defschema Proof
        @doc 
        "Structure representing a proof in zk-SNARKs. \
        \ It includes an array of public values and points a, b, and c in G1 or G2."
        public_values: [integer]
        a: object{G1Point}
        b: object{G2Point}
        c: object{G1Point}
    )

    (defun verify (proof:object{Proof})
        @doc 
        "Structure representing a proof in zk-SNARKs. It comprises the public values and points a, b, and c in G1 or G2 forms. \
        \ This structure is used to encapsulate the proof data that needs to be verified using the Groth16 verification algorithm."
      
        (
            let* 
            (
                (input (at 'public_values proof))
                (enforce (+ (length input) 1) "verifier-bas-input")
                
                (verifier_init 
                    { 
                        "n_public": 12,
                        "alfa1": { "x": 19585229621408861241979089483891340022980560671819105963109956904101022953913, "y": 17683889819663003197107728572179825117093108995628430167242695730269218995449 },
                        "beta2": { "x": [5918189778294398373867215857077657485085144687386129296042139262418695375465 11815681884459819136775466292413961857142768070519748123365539964381646088673], "y": [16256495067915955788372634108963148989989955099312959915110410844897734263002 17272844284718878797026118469560524097391792914946780395473367380843919101959] },
                        "gamma2": { "x": [10857046999023057135944570762232829481370756359578518086990519993285655852781 11559732032986387107991004021392285783925812861821192530917403151452391805634], "y": [8495653923123431417604973247489272438418190587263600148770280649306958101930 4082367875863433681332203403145435568316851327593401208105741076214120093531] },
                        "delta2": { "x": [1154332122372848738289806903652118136934215008037371097852100167354593135995 7020507176397096327969770463385369427053612980427564931950291538787746537340], "y": [1774868790807238699838436737385502712758882026271424794379562585226471166869 18672030861265519896486089333657756314182588738194980461824971485056718271986] },
                        "ic": [
                                { "x": 2779104198676611971379309095432195705775530372000444232955913665631897336887, "y": 12049763555848482956535134337060525976986286195959788281156037561525908487671 },
                                { "x": 7703942721245692864857159697746271175231485161308051342368703837146827856301, "y": 8842197012767508255227188261407929260667541888408759248273040498013984859155 },
                                { "x": 4511712481256944580630364211835915626435179674554683709472939041112718145340, "y": 10005420503101556280004208393540417066773209504488427000886748941984830496189 },
                                { "x": 1147017216570769096066799796987324742018646002051131237291085219796680822388, "y": 363967917022140166631443714088856077524654486853160316220441838185016825320 },
                                { "x": 21023984662540865202486709392704852126384430012944708307320120718476741034227, "y": 2494235638420097839723188947474171627482022371070666282826994185798695673442 },
                                { "x": 17036392625181093960557673941905783355583398458823976360088063914573659736263, "y": 18462066712950779341135652169074146888627589076131369872890698515688413089572 },
                                { "x": 13921448634862468573617517224574841695031727236091961708633532610011540501492, "y": 14647706582822205812183293728586901084584739275106603954446954183636246615904 },
                                { "x": 11845055373388314628680640195029092366745833823727644962994924544799503607616, "y": 1926948824722603393436425758971208851096979979742627793590306801040334809035 },
                                { "x": 4162114261372268975613508715893668083094335195033917996009676369749199176378, "y": 20726109617061884382702498380771768901158815296233921375675757958529828669589 },
                                { "x": 12548674481402160260546336928024057405614880134290028331822577654604735983771, "y": 4263709419064377387110863075992116677983721033815410413912674126957743777313 },
                                { "x": 7700989781854460621668290839670357329653777561743528083492300189218166237547, "y": 20299646415424897216756343658844784746061124631046459922895119488565806539405 },
                                { "x": 7568146125945235163969949623569824659155639605637991310989452363328835233351, "y": 2963842507220432185260262633228652528478582643004958364244092170606739366400 },
                                { "x": 14262553055630012407947589613014736827029211351725131830935483482084283926854, "y": 686748510122843825509738146550642682466362320582936711203934759110922174803 }
                        ],
                        "snark_scalar_field": 21888242871839275222246405745257275088548364400416034343698204186575808495617
                    }
                )

                (vk_x { "x": 0, "y": 0 })
                (ic_0 (at 0 (at 'ic verifier_init)))
                (vk_x_0 (point-add 'g1 vk_x ic_0))
                (snark_scalar_field (at 'snark_scalar_field verifier_init))

                
                    (input_1 (at 0 input))
                    (enforce (< input_1 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_1 (at 1 (at 'ic verifier_init)))
                    (vk_y_1 (scalar-mult 'g1 ic_1 input_1))
                    (vk_x_1 (point-add 'g1 vk_x_0 vk_y_1))
                
                    (input_2 (at 1 input))
                    (enforce (< input_2 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_2 (at 2 (at 'ic verifier_init)))
                    (vk_y_2 (scalar-mult 'g1 ic_2 input_2))
                    (vk_x_2 (point-add 'g1 vk_x_1 vk_y_2))
                
                    (input_3 (at 2 input))
                    (enforce (< input_3 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_3 (at 3 (at 'ic verifier_init)))
                    (vk_y_3 (scalar-mult 'g1 ic_3 input_3))
                    (vk_x_3 (point-add 'g1 vk_x_2 vk_y_3))
                
                    (input_4 (at 3 input))
                    (enforce (< input_4 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_4 (at 4 (at 'ic verifier_init)))
                    (vk_y_4 (scalar-mult 'g1 ic_4 input_4))
                    (vk_x_4 (point-add 'g1 vk_x_3 vk_y_4))
                
                    (input_5 (at 4 input))
                    (enforce (< input_5 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_5 (at 5 (at 'ic verifier_init)))
                    (vk_y_5 (scalar-mult 'g1 ic_5 input_5))
                    (vk_x_5 (point-add 'g1 vk_x_4 vk_y_5))
                
                    (input_6 (at 5 input))
                    (enforce (< input_6 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_6 (at 6 (at 'ic verifier_init)))
                    (vk_y_6 (scalar-mult 'g1 ic_6 input_6))
                    (vk_x_6 (point-add 'g1 vk_x_5 vk_y_6))
                
                    (input_7 (at 6 input))
                    (enforce (< input_7 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_7 (at 7 (at 'ic verifier_init)))
                    (vk_y_7 (scalar-mult 'g1 ic_7 input_7))
                    (vk_x_7 (point-add 'g1 vk_x_6 vk_y_7))
                
                    (input_8 (at 7 input))
                    (enforce (< input_8 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_8 (at 8 (at 'ic verifier_init)))
                    (vk_y_8 (scalar-mult 'g1 ic_8 input_8))
                    (vk_x_8 (point-add 'g1 vk_x_7 vk_y_8))
                
                    (input_9 (at 8 input))
                    (enforce (< input_9 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_9 (at 9 (at 'ic verifier_init)))
                    (vk_y_9 (scalar-mult 'g1 ic_9 input_9))
                    (vk_x_9 (point-add 'g1 vk_x_8 vk_y_9))
                
                    (input_10 (at 9 input))
                    (enforce (< input_10 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_10 (at 10 (at 'ic verifier_init)))
                    (vk_y_10 (scalar-mult 'g1 ic_10 input_10))
                    (vk_x_10 (point-add 'g1 vk_x_9 vk_y_10))
                
                    (input_11 (at 10 input))
                    (enforce (< input_11 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_11 (at 11 (at 'ic verifier_init)))
                    (vk_y_11 (scalar-mult 'g1 ic_11 input_11))
                    (vk_x_11 (point-add 'g1 vk_x_10 vk_y_11))
                
                    (input_12 (at 11 input))
                    (enforce (< input_12 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_12 (at 12 (at 'ic verifier_init)))
                    (vk_y_12 (scalar-mult 'g1 ic_12 input_12))
                    (vk_x_12 (point-add 'g1 vk_x_11 vk_y_12))
                
                (a1 (negate (at 'a proof)))
                (a2 (at 'b proof))
                (b1 (at 'alfa1 verifier_init))
                (b2 (at 'beta2 verifier_init))
                (c1 vk_x_12)
                (c2 (at 'gamma2 verifier_init))
                (d1 (at 'c proof))
                (d2 (at 'delta2 verifier_init))
            )
            (check-pairing a1 a2 b1 b2 c1 c2 d1 d2)
        )   
    )

    (defun negate(p:object{G1Point})
        @doc
        "Function to negate a G1 point, a common operation in elliptic curve cryptography. \
        \ It takes a G1 point and returns its negation. This function is used within the verification process."

        (
            let*
            (
                (q 21888242871839275222246405745257275088696311157297823662689037894645226208583)
                (x (at 'x p))
                (y (at 'y p))
            )
            (if (= p {"x": 0, "y": 0})
                {"x": 0, "y": 0}
                {"x": x, "y": (- q (mod y q))}
            )
        )
    )

    (defun check-pairing(a1:object{G1Point} a2:object{G2Point} b1:object{G1Point} b2:object{G2Point} c1:object{G1Point} c2:object{G2Point} d1:object{G1Point} d2:object{G2Point})
        @doc 
        "Function to perform a pairing check, a core component of zk-SNARKs verification. \
        \ It involves checking the mathematical relationships between pairs of G1 and G2 points, \
        \ which is used to ensure the validity of a zk-SNARKs proof."
     
        (
            let*
            (
                (p1 [a1 b1 c1 d1])
                (p2 [a2 b2 c2 d2])
                (paired (pairing-check p1 p2))
            )
            {
                "paired": paired
            }
        )
    )
)