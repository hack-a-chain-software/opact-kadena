(namespace (read-msg 'ns))

(module groth16-8x2 GOVERNANCE
    @doc
    "This module implements Groth16 zk-SNARKs (Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) verification. \
    \ It dynamically names the module based on the number of public inputs. \
    \ The module includes definitions for G1 and G2 points on an elliptic curve, a verifier structure, \
    \ and a proof structure. It also provides functions to verify zk-SNARKs proofs."

    (defcap GOVERNANCE ()
        @doc 
        "Governance capability to enforce specific administrative privileges. \
        \ It ensures that only authorized keysets can perform critical operations within the module."
     
        (enforce-keyset "free.opact-admin")
    )

    (defschema G1Point
        @doc
        "Structure representing a G1 point in an elliptic curve, consisting of x and y coordinates as integers. \
        \ G1 points are used in various cryptographic operations within the zk-SNARKs protocol."
   
        x: integer
        y: integer
    )
    
    (defschema G2Point
        @doc
        "Structure representing a G2 point in an elliptic curve. G2 points are similar to G1 points but require arrays \
        \ of integers for coordinates to accommodate the complexity and size of the data involved in zk-SNARKs."
       
        x: [integer]
        y: [integer]
    )

    (defschema Verifier
        @doc 
        "Structure representing the verifier in zk-SNARKs. \
        \ It includes the number of public inputs, points alfa1, beta2, gamma2, \
        \ delta2 in G1 or G2, an array of G1 points for input consistency (ic), and the snark scalar field."
      
        n_public: integer
        alfa1: object{G1Point}
        beta2: object{G2Point}
        gamma2: object{G2Point}
        delta2: object{G2Point}
        ic: [object{G1Point}]
        snark_scalar_field: integer
    )

    (defschema Proof
        @doc 
        "Structure representing a proof in zk-SNARKs. \
        \ It includes an array of public values and points a, b, and c in G1 or G2."
        public_values: [integer]
        a: object{G1Point}
        b: object{G2Point}
        c: object{G1Point}
    )

    (defun verify (proof:object{Proof})
        @doc 
        "Structure representing a proof in zk-SNARKs. It comprises the public values and points a, b, and c in G1 or G2 forms. \
        \ This structure is used to encapsulate the proof data that needs to be verified using the Groth16 verification algorithm."
      
        (
            let* 
            (
                (input (at 'public_values proof))
                (enforce (+ (length input) 1) "verifier-bas-input")
                
                (verifier_init 
                    { 
                        "n_public": 15,
                        "alfa1": { "x": 19585229621408861241979089483891340022980560671819105963109956904101022953913, "y": 17683889819663003197107728572179825117093108995628430167242695730269218995449 },
                        "beta2": { "x": [5918189778294398373867215857077657485085144687386129296042139262418695375465 11815681884459819136775466292413961857142768070519748123365539964381646088673], "y": [16256495067915955788372634108963148989989955099312959915110410844897734263002 17272844284718878797026118469560524097391792914946780395473367380843919101959] },
                        "gamma2": { "x": [10857046999023057135944570762232829481370756359578518086990519993285655852781 11559732032986387107991004021392285783925812861821192530917403151452391805634], "y": [8495653923123431417604973247489272438418190587263600148770280649306958101930 4082367875863433681332203403145435568316851327593401208105741076214120093531] },
                        "delta2": { "x": [21093118845567294772073547599728877882296090234609232032067973589324858964016 21010720094603444554192570492309664718614130437870931598720372822256361989376], "y": [10329188949468684171443950651251939424126671511461677943846538307664496525231 10885346140708514850997391166699692817909199456156010253345030159845915714804] },
                        "ic": [
                                { "x": 18757842337238292761835058366841043705014940354511540083899012474832160520784, "y": 19434169738789210506851646445632925326797275782904812268430005359678358317634 },
                                { "x": 15112035688516227111369404474183159528173515469294643678943597392096144652330, "y": 16495397451526264456628626439506891036768519612072669738696365172368848284878 },
                                { "x": 14072003978373937848513203349537944566308892289533300490513797500527959681143, "y": 594778680787121376739071051025641892920207540312279698119517009071648489589 },
                                { "x": 4019305051434920485639416611293649728299526620063168738768197092143285980786, "y": 6545079602947928060629567218481417735013759568716651884755228196109803595392 },
                                { "x": 13389221301988295133300660098260099133232881749028916689848849621944685210676, "y": 106257726981041903521679764606209963525274778321797812989329600352228628407 },
                                { "x": 16392702550005090752138264635058557085629932171192835318400197415299725807729, "y": 1984926500752259136664818111521521085801006173575537506357200607745589956774 },
                                { "x": 6592237103805970202808109586787793646322346030958715579806936610062712878714, "y": 3167765758692794829119964655007451721673203820319830829485451900439169046877 },
                                { "x": 823699038608469500717238415003185059104135617011687184152582519120123716427, "y": 11352471868328741555317755154978817715012233553835606155822565031621935840456 },
                                { "x": 20795402720165845291965587637284656088869129043424642360121330255123255829098, "y": 6072147997454063080542305275827531408216220635083843836098028813188997516419 },
                                { "x": 17753971455881098446185813725935249465186999320098534342443183896126674473715, "y": 12448302978940398452213176478880704998718460777428057278411769269696923348401 },
                                { "x": 19687028761266681121584400229694248108685188020238765395128638831206374778344, "y": 10230483603997297379109228532903656833131503786822121724562341430649163698266 },
                                { "x": 6594962447542853791114955743924576888703568557957952060272878898505345524658, "y": 2304734787378504091295405891833754421748872621019073035633950869355674863448 },
                                { "x": 294641913690980696662664228473655452463726011661407457952137485750343027765, "y": 7855065636038638277757980362186944669451695236006411807498395667657022773779 },
                                { "x": 14177451786130610160474374938822498437948646849686037157702768211939749841361, "y": 14247604033805079145399481738437986517033821432921158465662747059580617993132 },
                                { "x": 16542407558322104020196201877450994807729949443593959342849585210559507624876, "y": 8374668291803625381617332096373546561071855346590521973584907172268353619688 },
                                { "x": 17189538240687275689436902919028735676567904105902345655156076175406935818625, "y": 6684526065472169536065990317537398436101948836648435099966155437822894843751 }
                        ],
                        "snark_scalar_field": 21888242871839275222246405745257275088548364400416034343698204186575808495617
                    }
                )

                (vk_x { "x": 0, "y": 0 })
                (ic_0 (at 0 (at 'ic verifier_init)))
                (vk_x_0 (point-add 'g1 vk_x ic_0))
                (snark_scalar_field (at 'snark_scalar_field verifier_init))

                
                    (input_1 (at 0 input))
                    (enforce (< input_1 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_1 (at 1 (at 'ic verifier_init)))
                    (vk_y_1 (scalar-mult 'g1 ic_1 input_1))
                    (vk_x_1 (point-add 'g1 vk_x_0 vk_y_1))
                
                    (input_2 (at 1 input))
                    (enforce (< input_2 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_2 (at 2 (at 'ic verifier_init)))
                    (vk_y_2 (scalar-mult 'g1 ic_2 input_2))
                    (vk_x_2 (point-add 'g1 vk_x_1 vk_y_2))
                
                    (input_3 (at 2 input))
                    (enforce (< input_3 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_3 (at 3 (at 'ic verifier_init)))
                    (vk_y_3 (scalar-mult 'g1 ic_3 input_3))
                    (vk_x_3 (point-add 'g1 vk_x_2 vk_y_3))
                
                    (input_4 (at 3 input))
                    (enforce (< input_4 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_4 (at 4 (at 'ic verifier_init)))
                    (vk_y_4 (scalar-mult 'g1 ic_4 input_4))
                    (vk_x_4 (point-add 'g1 vk_x_3 vk_y_4))
                
                    (input_5 (at 4 input))
                    (enforce (< input_5 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_5 (at 5 (at 'ic verifier_init)))
                    (vk_y_5 (scalar-mult 'g1 ic_5 input_5))
                    (vk_x_5 (point-add 'g1 vk_x_4 vk_y_5))
                
                    (input_6 (at 5 input))
                    (enforce (< input_6 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_6 (at 6 (at 'ic verifier_init)))
                    (vk_y_6 (scalar-mult 'g1 ic_6 input_6))
                    (vk_x_6 (point-add 'g1 vk_x_5 vk_y_6))
                
                    (input_7 (at 6 input))
                    (enforce (< input_7 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_7 (at 7 (at 'ic verifier_init)))
                    (vk_y_7 (scalar-mult 'g1 ic_7 input_7))
                    (vk_x_7 (point-add 'g1 vk_x_6 vk_y_7))
                
                    (input_8 (at 7 input))
                    (enforce (< input_8 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_8 (at 8 (at 'ic verifier_init)))
                    (vk_y_8 (scalar-mult 'g1 ic_8 input_8))
                    (vk_x_8 (point-add 'g1 vk_x_7 vk_y_8))
                
                    (input_9 (at 8 input))
                    (enforce (< input_9 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_9 (at 9 (at 'ic verifier_init)))
                    (vk_y_9 (scalar-mult 'g1 ic_9 input_9))
                    (vk_x_9 (point-add 'g1 vk_x_8 vk_y_9))
                
                    (input_10 (at 9 input))
                    (enforce (< input_10 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_10 (at 10 (at 'ic verifier_init)))
                    (vk_y_10 (scalar-mult 'g1 ic_10 input_10))
                    (vk_x_10 (point-add 'g1 vk_x_9 vk_y_10))
                
                    (input_11 (at 10 input))
                    (enforce (< input_11 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_11 (at 11 (at 'ic verifier_init)))
                    (vk_y_11 (scalar-mult 'g1 ic_11 input_11))
                    (vk_x_11 (point-add 'g1 vk_x_10 vk_y_11))
                
                    (input_12 (at 11 input))
                    (enforce (< input_12 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_12 (at 12 (at 'ic verifier_init)))
                    (vk_y_12 (scalar-mult 'g1 ic_12 input_12))
                    (vk_x_12 (point-add 'g1 vk_x_11 vk_y_12))
                
                    (input_13 (at 12 input))
                    (enforce (< input_13 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_13 (at 13 (at 'ic verifier_init)))
                    (vk_y_13 (scalar-mult 'g1 ic_13 input_13))
                    (vk_x_13 (point-add 'g1 vk_x_12 vk_y_13))
                
                    (input_14 (at 13 input))
                    (enforce (< input_14 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_14 (at 14 (at 'ic verifier_init)))
                    (vk_y_14 (scalar-mult 'g1 ic_14 input_14))
                    (vk_x_14 (point-add 'g1 vk_x_13 vk_y_14))
                
                    (input_15 (at 14 input))
                    (enforce (< input_15 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_15 (at 15 (at 'ic verifier_init)))
                    (vk_y_15 (scalar-mult 'g1 ic_15 input_15))
                    (vk_x_15 (point-add 'g1 vk_x_14 vk_y_15))
                
                (a1 (negate (at 'a proof)))
                (a2 (at 'b proof))
                (b1 (at 'alfa1 verifier_init))
                (b2 (at 'beta2 verifier_init))
                (c1 vk_x_15)
                (c2 (at 'gamma2 verifier_init))
                (d1 (at 'c proof))
                (d2 (at 'delta2 verifier_init))
            )
            (check-pairing a1 a2 b1 b2 c1 c2 d1 d2)
        )   
    )

    (defun negate(p:object{G1Point})
        @doc
        "Function to negate a G1 point, a common operation in elliptic curve cryptography. \
        \ It takes a G1 point and returns its negation. This function is used within the verification process."

        (
            let*
            (
                (q 21888242871839275222246405745257275088696311157297823662689037894645226208583)
                (x (at 'x p))
                (y (at 'y p))
            )
            (if (= p {"x": 0, "y": 0})
                {"x": 0, "y": 0}
                {"x": x, "y": (- q (mod y q))}
            )
        )
    )

    (defun check-pairing(a1:object{G1Point} a2:object{G2Point} b1:object{G1Point} b2:object{G2Point} c1:object{G1Point} c2:object{G2Point} d1:object{G1Point} d2:object{G2Point})
        @doc 
        "Function to perform a pairing check, a core component of zk-SNARKs verification. \
        \ It involves checking the mathematical relationships between pairs of G1 and G2 points, \
        \ which is used to ensure the validity of a zk-SNARKs proof."
     
        (
            let*
            (
                (p1 [a1 b1 c1 d1])
                (p2 [a2 b2 c2 d2])
                (paired (pairing-check p1 p2))
            )
            {
                "paired": paired
            }
        )
    )
)