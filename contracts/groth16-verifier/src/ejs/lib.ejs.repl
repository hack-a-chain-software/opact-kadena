(namespace (read-msg 'ns))

(module groth16-<%= n_public - 7 %>x2 GOVERNANCE
    @doc
    "This module implements Groth16 zk-SNARKs (Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) verification. \
    \ It dynamically names the module based on the number of public inputs. \
    \ The module includes definitions for G1 and G2 points on an elliptic curve, a verifier structure, \
    \ and a proof structure. It also provides functions to verify zk-SNARKs proofs."

    (defcap GOVERNANCE ()
        @doc 
        "Governance capability to enforce specific administrative privileges. \
        \ It ensures that only authorized keysets can perform critical operations within the module."
     
        (enforce-keyset "free.opact-admin")
    )

    (defschema G1Point
        @doc
        "Structure representing a G1 point in an elliptic curve, consisting of x and y coordinates as integers. \
        \ G1 points are used in various cryptographic operations within the zk-SNARKs protocol."
   
        x: integer
        y: integer
    )
    
    (defschema G2Point
        @doc
        "Structure representing a G2 point in an elliptic curve. G2 points are similar to G1 points but require arrays \
        \ of integers for coordinates to accommodate the complexity and size of the data involved in zk-SNARKs."
       
        x: [integer]
        y: [integer]
    )

    (defschema Verifier
        @doc 
        "Structure representing the verifier in zk-SNARKs. \
        \ It includes the number of public inputs, points alfa1, beta2, gamma2, \
        \ delta2 in G1 or G2, an array of G1 points for input consistency (ic), and the snark scalar field."
      
        n_public: integer
        alfa1: object{G1Point}
        beta2: object{G2Point}
        gamma2: object{G2Point}
        delta2: object{G2Point}
        ic: [object{G1Point}]
        snark_scalar_field: integer
    )

    (defschema Proof
        @doc 
        "Structure representing a proof in zk-SNARKs. \
        \ It includes an array of public values and points a, b, and c in G1 or G2."

        public_values: [integer]
        a: object{G1Point}
        b: object{G2Point}
        c: object{G1Point}
    )

    (defun verify (proof:object{Proof})
        @doc 
        "Structure representing a proof in zk-SNARKs. It comprises the public values and points a, b, and c in G1 or G2 forms. \
        \ This structure is used to encapsulate the proof data that needs to be verified using the Groth16 verification algorithm."
      
        (
            let* 
            (
                (input (at 'public_values proof))
                (enforce (+ (length input) 1) "verifier-bas-input")
                
                (verifier_init 
                    { 
                        "n_public": <%= n_public %>,
                        "alfa1": { "x": <%= alfa1.x %>, "y": <%= alfa1.y %> },
                        "beta2": { "x": [<%= String(beta2.x).replace(","," ") %>], "y": [<%= String(beta2.y).replace(",", " ") %>] },
                        "gamma2": { "x": [<%= String(gamma2.x).replace(","," ") %>], "y": [<%= String(gamma2.y).replace(",", " ") %>] },
                        "delta2": { "x": [<%= String(delta2.x).replace(","," ") %>], "y": [<%= String(delta2.y).replace(",", " ") %>] },
                        "ic": [<% for (let i = 0; i < ic.length; i++) {
                            if (i == ic.length - 1) { %>
                                { "x": <%= ic[i].x %>, "y": <%= ic[i].y %> }<% } else { %>
                                { "x": <%= ic[i].x %>, "y": <%= ic[i].y %> },<% } }
                            %>
                        ],
                        "snark_scalar_field": 21888242871839275222246405745257275088548364400416034343698204186575808495617
                    }
                )

                (vk_x { "x": 0, "y": 0 })
                (ic_0 (at 0 (at 'ic verifier_init)))
                (vk_x_0 (point-add 'g1 vk_x ic_0))
                (snark_scalar_field (at 'snark_scalar_field verifier_init))

                <% for (let i = 1; i <= n_public; i++) { %>
                    (input_<%= i %> (at <%= i - 1 %> input))
                    (enforce (< input_<%= i %> snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_<%= i %> (at <%= i %> (at 'ic verifier_init)))
                    (vk_y_<%= i %> (scalar-mult 'g1 ic_<%= i %> input_<%= i %>))
                    (vk_x_<%= i %> (point-add 'g1 vk_x_<%= i-1 %> vk_y_<%= i %>))
                <% } %>
                (a1 (negate (at 'a proof)))
                (a2 (at 'b proof))
                (b1 (at 'alfa1 verifier_init))
                (b2 (at 'beta2 verifier_init))
                (c1 vk_x_<%= n_public %>)
                (c2 (at 'gamma2 verifier_init))
                (d1 (at 'c proof))
                (d2 (at 'delta2 verifier_init))
            )
            (check-pairing a1 a2 b1 b2 c1 c2 d1 d2)
        )   
    )

    (defun negate(p:object{G1Point})
        @doc
        "Function to negate a G1 point, a common operation in elliptic curve cryptography. \
        \ It takes a G1 point and returns its negation. This function is used within the verification process."

        (
            let*
            (
                (q 21888242871839275222246405745257275088696311157297823662689037894645226208583)
                (x (at 'x p))
                (y (at 'y p))
            )
            (if (= p {"x": 0, "y": 0})
                {"x": 0, "y": 0}
                {"x": x, "y": (- q (mod y q))}
            )
        )
    )

    (defun check-pairing(a1:object{G1Point} a2:object{G2Point} b1:object{G1Point} b2:object{G2Point} c1:object{G1Point} c2:object{G2Point} d1:object{G1Point} d2:object{G2Point})
        @doc 
        "Function to perform a pairing check, a core component of zk-SNARKs verification. \
        \ It involves checking the mathematical relationships between pairs of G1 and G2 points, \
        \ which is used to ensure the validity of a zk-SNARKs proof."
     
        (
            let*
            (
                (p1 [a1 b1 c1 d1])
                (p2 [a2 b2 c2 d2])
                (paired (pairing-check p1 p2))
            )
            {
                "paired": paired
            }
        )
    )
)