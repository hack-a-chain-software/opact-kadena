(namespace (read-msg 'ns))

(module groth16-4x2 GOVERNANCE
    @doc
    "This module implements Groth16 zk-SNARKs (Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) verification. \
    \ It dynamically names the module based on the number of public inputs. \
    \ The module includes definitions for G1 and G2 points on an elliptic curve, a verifier structure, \
    \ and a proof structure. It also provides functions to verify zk-SNARKs proofs."

    (defcap GOVERNANCE ()
        @doc 
        "Governance capability to enforce specific administrative privileges. \
        \ It ensures that only authorized keysets can perform critical operations within the module."
     
        (enforce-keyset "free.opact-admin")
    )

    (defschema G1Point
        @doc
        "Structure representing a G1 point in an elliptic curve, consisting of x and y coordinates as integers. \
        \ G1 points are used in various cryptographic operations within the zk-SNARKs protocol."
   
        x: integer
        y: integer
    )
    
    (defschema G2Point
        @doc
        "Structure representing a G2 point in an elliptic curve. G2 points are similar to G1 points but require arrays \
        \ of integers for coordinates to accommodate the complexity and size of the data involved in zk-SNARKs."
       
        x: [integer]
        y: [integer]
    )

    (defschema Verifier
        @doc 
        "Structure representing the verifier in zk-SNARKs. \
        \ It includes the number of public inputs, points alfa1, beta2, gamma2, \
        \ delta2 in G1 or G2, an array of G1 points for input consistency (ic), and the snark scalar field."
      
        n_public: integer
        alfa1: object{G1Point}
        beta2: object{G2Point}
        gamma2: object{G2Point}
        delta2: object{G2Point}
        ic: [object{G1Point}]
        snark_scalar_field: integer
    )

    (defschema Proof
        @doc 
        "Structure representing a proof in zk-SNARKs. \
        \ It includes an array of public values and points a, b, and c in G1 or G2."
        public_values: [integer]
        a: object{G1Point}
        b: object{G2Point}
        c: object{G1Point}
    )

    (defun verify (proof:object{Proof})
        @doc 
        "Structure representing a proof in zk-SNARKs. It comprises the public values and points a, b, and c in G1 or G2 forms. \
        \ This structure is used to encapsulate the proof data that needs to be verified using the Groth16 verification algorithm."
      
        (
            let* 
            (
                (input (at 'public_values proof))
                (enforce (+ (length input) 1) "verifier-bas-input")
                
                (verifier_init 
                    { 
                        "n_public": 11,
                        "alfa1": { "x": 19585229621408861241979089483891340022980560671819105963109956904101022953913, "y": 17683889819663003197107728572179825117093108995628430167242695730269218995449 },
                        "beta2": { "x": [5918189778294398373867215857077657485085144687386129296042139262418695375465 11815681884459819136775466292413961857142768070519748123365539964381646088673], "y": [16256495067915955788372634108963148989989955099312959915110410844897734263002 17272844284718878797026118469560524097391792914946780395473367380843919101959] },
                        "gamma2": { "x": [10857046999023057135944570762232829481370756359578518086990519993285655852781 11559732032986387107991004021392285783925812861821192530917403151452391805634], "y": [8495653923123431417604973247489272438418190587263600148770280649306958101930 4082367875863433681332203403145435568316851327593401208105741076214120093531] },
                        "delta2": { "x": [1976503288892215519816509377991348295843796807137503631985476067117700874977 7502388771374617015068812213930244773672724797328200208960134593343068139836], "y": [13367786708965493222088205854034085995716021651332181119458210843051483358844 6910560721276779421330109982074305517154984003632731711346787485493060683119] },
                        "ic": [
                                { "x": 6925360421048976687252570893712406372097567118003777108387542757419890469675, "y": 5166555904563020313093030131975037353886731017885186025409138878928841032930 },
                                { "x": 17709640620951459082739108464084051346407341038386851031408701823593951313702, "y": 10887500511825310903428103279705391533410535930561482590703543223680338073556 },
                                { "x": 14250518279274420123159517960743073377621386078443437249233206162549831363150, "y": 20440007986375187620536318195378319559209315109401083605626073708825951749526 },
                                { "x": 11294333176913856837546101579607579325446683358058611917594775096963646673983, "y": 11859413923836060554331109610852781077471582380874976444293535280224397111658 },
                                { "x": 9418226002309845158304651515089848211013724601664495866050488429646806284961, "y": 17812879574220095198417868517029230973553712936099794395616395220769695860927 },
                                { "x": 355955097521383791303687665729344120075259008601810279888033914456420706873, "y": 6307641231126697872646294150198044561105419222061561096652461962354149469700 },
                                { "x": 1983988144575296013862280162984091331633260666310784105131399694665042364689, "y": 2926786145281400006874081240508020913507878018470853860662943229061663215380 },
                                { "x": 5421498270891273971395865270822261855646178589400363246569090726996872118190, "y": 6034200897272046343140238029202088839354591414668998314872359502763650885567 },
                                { "x": 3590825187042420505729802594974183889095478507855146535011463525684912491248, "y": 9469140810992668828981803421446660082014579064679743982588753570926036197901 },
                                { "x": 16530552187081384408244226384303506174090296737769433459535228082309284883737, "y": 4505646500498222295243965690050031077994321809019809992182134914433147028190 },
                                { "x": 11937019415952029080058479622560067524457987574459339444508679010127467113999, "y": 9831122991228735103434499398425959062012171378334982551862199727701209628046 },
                                { "x": 2442254305969613522332423215018598967738365140762340749355871929519073677334, "y": 8384641378022474799017268215403760928799344179923802083692424551370681586013 }
                        ],
                        "snark_scalar_field": 21888242871839275222246405745257275088548364400416034343698204186575808495617
                    }
                )

                (vk_x { "x": 0, "y": 0 })
                (ic_0 (at 0 (at 'ic verifier_init)))
                (vk_x_0 (point-add 'g1 vk_x ic_0))
                (snark_scalar_field (at 'snark_scalar_field verifier_init))

                
                    (input_1 (at 0 input))
                    (enforce (< input_1 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_1 (at 1 (at 'ic verifier_init)))
                    (vk_y_1 (scalar-mult 'g1 ic_1 input_1))
                    (vk_x_1 (point-add 'g1 vk_x_0 vk_y_1))
                
                    (input_2 (at 1 input))
                    (enforce (< input_2 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_2 (at 2 (at 'ic verifier_init)))
                    (vk_y_2 (scalar-mult 'g1 ic_2 input_2))
                    (vk_x_2 (point-add 'g1 vk_x_1 vk_y_2))
                
                    (input_3 (at 2 input))
                    (enforce (< input_3 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_3 (at 3 (at 'ic verifier_init)))
                    (vk_y_3 (scalar-mult 'g1 ic_3 input_3))
                    (vk_x_3 (point-add 'g1 vk_x_2 vk_y_3))
                
                    (input_4 (at 3 input))
                    (enforce (< input_4 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_4 (at 4 (at 'ic verifier_init)))
                    (vk_y_4 (scalar-mult 'g1 ic_4 input_4))
                    (vk_x_4 (point-add 'g1 vk_x_3 vk_y_4))
                
                    (input_5 (at 4 input))
                    (enforce (< input_5 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_5 (at 5 (at 'ic verifier_init)))
                    (vk_y_5 (scalar-mult 'g1 ic_5 input_5))
                    (vk_x_5 (point-add 'g1 vk_x_4 vk_y_5))
                
                    (input_6 (at 5 input))
                    (enforce (< input_6 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_6 (at 6 (at 'ic verifier_init)))
                    (vk_y_6 (scalar-mult 'g1 ic_6 input_6))
                    (vk_x_6 (point-add 'g1 vk_x_5 vk_y_6))
                
                    (input_7 (at 6 input))
                    (enforce (< input_7 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_7 (at 7 (at 'ic verifier_init)))
                    (vk_y_7 (scalar-mult 'g1 ic_7 input_7))
                    (vk_x_7 (point-add 'g1 vk_x_6 vk_y_7))
                
                    (input_8 (at 7 input))
                    (enforce (< input_8 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_8 (at 8 (at 'ic verifier_init)))
                    (vk_y_8 (scalar-mult 'g1 ic_8 input_8))
                    (vk_x_8 (point-add 'g1 vk_x_7 vk_y_8))
                
                    (input_9 (at 8 input))
                    (enforce (< input_9 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_9 (at 9 (at 'ic verifier_init)))
                    (vk_y_9 (scalar-mult 'g1 ic_9 input_9))
                    (vk_x_9 (point-add 'g1 vk_x_8 vk_y_9))
                
                    (input_10 (at 9 input))
                    (enforce (< input_10 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_10 (at 10 (at 'ic verifier_init)))
                    (vk_y_10 (scalar-mult 'g1 ic_10 input_10))
                    (vk_x_10 (point-add 'g1 vk_x_9 vk_y_10))
                
                    (input_11 (at 10 input))
                    (enforce (< input_11 snark_scalar_field) "verifier-gte-snark-scalar-field")

                    (ic_11 (at 11 (at 'ic verifier_init)))
                    (vk_y_11 (scalar-mult 'g1 ic_11 input_11))
                    (vk_x_11 (point-add 'g1 vk_x_10 vk_y_11))
                
                (a1 (negate (at 'a proof)))
                (a2 (at 'b proof))
                (b1 (at 'alfa1 verifier_init))
                (b2 (at 'beta2 verifier_init))
                (c1 vk_x_11)
                (c2 (at 'gamma2 verifier_init))
                (d1 (at 'c proof))
                (d2 (at 'delta2 verifier_init))
            )
            (check-pairing a1 a2 b1 b2 c1 c2 d1 d2)
        )   
    )

    (defun negate(p:object{G1Point})
        @doc
        "Function to negate a G1 point, a common operation in elliptic curve cryptography. \
        \ It takes a G1 point and returns its negation. This function is used within the verification process."

        (
            let*
            (
                (q 21888242871839275222246405745257275088696311157297823662689037894645226208583)
                (x (at 'x p))
                (y (at 'y p))
            )
            (if (= p {"x": 0, "y": 0})
                {"x": 0, "y": 0}
                {"x": x, "y": (- q (mod y q))}
            )
        )
    )

    (defun check-pairing(a1:object{G1Point} a2:object{G2Point} b1:object{G1Point} b2:object{G2Point} c1:object{G1Point} c2:object{G2Point} d1:object{G1Point} d2:object{G2Point})
        @doc 
        "Function to perform a pairing check, a core component of zk-SNARKs verification. \
        \ It involves checking the mathematical relationships between pairs of G1 and G2 points, \
        \ which is used to ensure the validity of a zk-SNARKs proof."
     
        (
            let*
            (
                (p1 [a1 b1 c1 d1])
                (p2 [a2 b2 c2 d2])
                (paired (pairing-check p1 p2))
            )
            {
                "paired": paired
            }
        )
    )
)