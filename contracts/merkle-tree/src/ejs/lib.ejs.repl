(module zk-contract MODULE_ADMIN
    (defcap MODULE_ADMIN () true)

    (defschema FilledSubtreesSchema
        "Schema for the filledSubtrees table"
        value:string)
      
    (defschema RootsSchema
        "Schema for the roots table"
        value:string)

    (defschema StateSchema
        "Schema for the config table"
        current_root_index:integer
        next_index:integer
    )
      
    (deftable filledSubtrees:{FilledSubtreesSchema})
    (deftable roots:{RootsSchema})
    (deftable state:{StateSchema})

    (defun get-current-root-index ()
        (at 'current_root_index (read state "0")))
    
    (defun get-next-index ()
        (at 'next_index (read state "0")))

    (defun set-current-root-index (current_root_index:integer)
        (update state "0" {"current_root_index": current_root_index}))
    
    (defun set-next-index (next_index:integer)
        (update state "0" {"next_index": next_index}))

    (defun set-filled-subtrees (key:string value:string)
        (write filledSubtrees key { "value": value }))

    (defun insert-root (key:string value:string)
        (write roots key { "value": value }))

    (defun my-hash (left:string right:string)
        (hash (+ left right)))

    (defun initialize()
        <% for (let i = 0; i < level; i++) { %>
            (set-filled-subtrees "<%= i %>" (zeros <%= i %>))
        <% } %>

        (insert-root "0" (zeros 0))

        (insert state "0" {
            "current_root_index": 0,
            "next_index": 0
        })
    )

    (defun zeros (i:integer)
        (if (= i 0)
            "D9kjyl5yGMS6PDgBwmphfs2_2uu5x2zi7KFm54Ve-7g" ; (hash "0")
            (if (= i 1)
                "s1sm9e2GFnqacffSdC5KpjHwqIzD2Ocr5pGGpgktnJk" ; (hash (+ "D9kjyl5yGMS6PDgBwmphfs2_2uu5x2zi7KFm54Ve" "D9kjyl5yGMS6PDgBwmphfs2_2uu5x2zi7KFm54Ve"))
                (if (= i 2)
                    "-yuQcXs9Wr_GOZTpN6UG1RhjBULGWEL22v_9jyVZ_ss" ; (hash (+ "s1sm9e2GFnqacffSdC5KpjHwqIzD2Ocr5pGGpgktnJk" "s1sm9e2GFnqacffSdC5KpjHwqIzD2Ocr5pGGpgktnJk"))
                    ""
                )
            )  
        )
    )

    (defun insert-leaf (leaf:string)
        (
            let*
            (
                (root_history_size 30)
                (next-index (get-next-index))
                (current_index next-index)
                (current_level_hash leaf)
                (hashes [])

                <% for (let i = 1; i <= level; i++) { %>
                    (filled_subtrees (at 'value (read filledSubtrees "<%= i - 1 %>")))

                    (lr_<%= i %> (if (= (mod current_index 2) 0)
                        {"left": current_level_hash, "right": (zeros <%= i -1 %>)}
                        {"left": filled_subtrees, "right": current_level_hash}
                    ))

                    (hashes (+ hashes (if (= (mod current_index 2) 0)
                        (list current_level_hash)
                        (list (zeros <%= i - 1 %>)))
                    ))

                    (current_level_hash (my-hash (at 'left lr_<%= i %>) (at 'right lr_<%= i %>)))

                    (current_index (/ current_index 2))
                <% } %>

                (current_root_index (at 'current_root_index (read state "0")))
                (new_root_index (mod (+ current_root_index 1) root_history_size))
                (root-index (int-to-str 10 new_root_index))
            )
            (insert-root root-index current_level_hash)
            (set-current-root-index new_root_index)
            (set-next-index (+ next-index 1))
        <% for (let i = 0; i < level; i++) { %>
            (if (= (at <%= i %> hashes) (zeros <%= i %>))
                ""
                (set-filled-subtrees "<%= i %>" (at <%= i %> hashes))
            )
        <% } %>
            {
                "root": current_level_hash,
                "state": {
                    "current_root_index": new_root_index,
                    "next_index": (+ next-index 1)
                }
            }
        )
    )
)

(create-table roots)
(create-table filledSubtrees)
(create-table state)
(initialize)