(namespace (read-msg 'ns))

(module merkle MODULE_ADMIN
    (defcap MODULE_ADMIN () true)

    (defschema FilledSubtreesSchema
        "Schema for the filledSubtrees table"
        value:integer)
      
    (defschema RootsSchema
        "Schema for the roots table"
        value:integer)

    (defschema StateSchema
        "Schema for the config table"
        current_root_index:integer
        next_index:integer
    )
      
    (deftable filledSubtrees:{FilledSubtreesSchema})
    (deftable roots:{RootsSchema})
    (deftable state:{StateSchema})

    (defun get-current-root-index ()
        (at 'current_root_index (read state "0")))
    
    (defun get-next-index ()
        (at 'next_index (read state "0")))

    (defun set-current-root-index (current_root_index:integer)
        (update state "0" {"current_root_index": current_root_index}))
    
    (defun set-next-index (next_index:integer)
        (update state "0" {"next_index": next_index}))

    (defun set-filled-subtrees (key:string value:integer)
        (write filledSubtrees key { "value": value }))

    (defun insert-root (key:string value:integer)
        (write roots key { "value": value }))

    (defun blake-hash (left:string right:string)
        (hash [left right]))

    (defun initialize()
        <% for (let i = 0; i < level; i++) { %>
            (set-filled-subtrees "<%= i %>" (poseidon-zeros <%= i %>))
        <% } %>

        (insert-root "0" (poseidon-zeros 0))

        (insert state "0" {
            "current_root_index": 0,
            "next_index": 0
        })
    )

    (defun reset()
        <% for (let i = 0; i < level; i++) { %>
            (set-filled-subtrees "<%= i %>" (poseidon-zeros <%= i %>))
        <% } %>

        (insert-root "0" (poseidon-zeros 0))

        (write state "0" {
            "current_root_index": 0,
            "next_index": 0
        })
    )

    (defun blake-zeros (i:integer)
        (if (= i 0)
            "gU2Q4_mob4UQ6u3w7mAh9vts0iI3_pSIQUEzl2dPXKo" ; (hash "0") zeroElement
            (if (= i 1)
                "Il1ocCVlKjmfq4tniMxSaMdTAwof1Damh7g1SZsFd1E" ; (hash (+ "gU2Q4_mob4UQ6u3w7mAh9vts0iI3_pSIQUEzl2dPXKo" "gU2Q4_mob4UQ6u3w7mAh9vts0iI3_pSIQUEzl2dPXKo"))
                (if (= i 2)
                    "Br5EWetygPF7ePyxUz8J6V2txrCR_xwSDalTWmGvOfI" ; (hash (+ "Il1ocCVlKjmfq4tniMxSaMdTAwof1Damh7g1SZsFd1E" "Il1ocCVlKjmfq4tniMxSaMdTAwof1Damh7g1SZsFd1E"))
                    ""
                )
            )  
        )
    )

    (defun poseidon-zeros (i:integer)
        (if (= i 0)
            19014214495641488759237505126948346942972912379615652741039992445865937985820 ; (hash "0") zeroElement
            (if (= i 1)
                10447686833432518214645507207530993719569269870494442919228205482093666444588 ; (hash (+ "19014214495641488759237505126948346942972912379615652741039992445865937985820" "19014214495641488759237505126948346942972912379615652741039992445865937985820"))
                (if (= i 2)
                    2186774891605521484511138647132707263205739024356090574223746683689524510919 ; (hash (+ "10447686833432518214645507207530993719569269870494442919228205482093666444588" "10447686833432518214645507207530993719569269870494442919228205482093666444588"))
                    ""
                )
            )  
        )
    )

    (defun is-known-root (root:integer)
        (
            let*
            (
                (root_value (length (select roots (where 'value (= root)))))
            )
            (= root_value 1)
        )
    )

    (defun insert-leaf (leaf:integer)
        (
            let*
            (
                (root_history_size 30)
                (next-index (get-next-index))
                (current_index next-index)
                (current_level_hash leaf)
                (hashes [])

                <% for (let i = 1; i <= level; i++) { %>
                    (filled_subtrees (at 'value (read filledSubtrees "<%= i - 1 %>")))

                    (lr_<%= i %> (if (= (mod current_index 2) 0)
                        {"left": current_level_hash, "right": (poseidon-zeros <%= i - 1 %>)}
                        {"left": filled_subtrees, "right": current_level_hash}
                    ))

                    (hashes (+ hashes (if (= (mod current_index 2) 0)
                        [current_level_hash]
                        [(poseidon-zeros <%= i - 1 %>)])
                    ))

                    (current_level_hash (poseidon-hash (at 'left lr_<%= i %>) (at 'right lr_<%= i %>)))

                    (current_index (/ current_index 2))
                <% } %>

                (current_root_index (at 'current_root_index (read state "0")))
                (new_root_index (mod (+ current_root_index 1) root_history_size))
                (root-index (int-to-str 10 new_root_index))
            )
            (insert-root root-index current_level_hash)
            (set-current-root-index new_root_index)
            (set-next-index (+ next-index 1))
        <% for (let i = 0; i < level; i++) { %>
            (if (= (at <%= i %> hashes) (poseidon-zeros <%= i %>))
                ""
                (set-filled-subtrees "<%= i %>" (at <%= i %> hashes))
            )
        <% } %>
        {
            "root": current_level_hash,
            "index": new_root_index
        })
    )
)

(create-table roots)
(create-table filledSubtrees)
(create-table state)
(initialize)