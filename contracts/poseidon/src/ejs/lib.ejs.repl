(namespace (read-msg 'ns))

(module poseidon MODULE_ADMIN
    (defcap MODULE_ADMIN () true)

    (defun sigma(in:integer)
        (
            let*
            (
                (in2 (mulmod in in))
                (in4 (mulmod in2 in2))
            )
            (mulmod in4 in)
        )
    )

    (defun ark(in:integer c:integer)
        (summod in c)
    )

    (defun mix(in1:integer in2:integer in3:integer i:integer)
        (
            let*
            (
                (lc 0)
            <% for(let j = 0; j < t; j++) { %>
                (lc (summod lc (mulmod (getMatrix i <%= j %>) in<%= j+1 %>)))
            <% } %>
            )
            lc
        )
    )

    (defun mulmod(a:integer b:integer)
        (mod (* a b) <%= p %>)
    )

    (defun summod(a:integer b:integer)
        (mod (+ a b) <%= p %>)
    )

    (defun getConstant(i:integer)
        (
            let*
            (
                (c_data [
                    <% for (let i = 0; i < c.length; i++) {%> <%= c[i] %><% } %>
                ])
            )
            (at i c_data)
        )
    )

    (defun getMatrix(i:integer j:integer)
        (
            let*
            (
                (m_data [
                    <% for (let i = 0; i < m.length; i++) {%>
                        [<% for (let j = 0; j < m[i].length; j++) { %> <%= m[i][j] %><% } %>]
                    <% } %>
                ])
            )
            (at j (at i m_data))
        )
    )

    (defun poseidon(inputs:[integer])
        (
            let*
            (
                <% for (let i = 0; i < (parseInt(nRoundsF) + parseInt(nRoundsP)); i++) {
                    for(let j = 0; j < t; j++) {
                        if (i == 0) {
                            if (j < nInputs) { %>
                            (ark_<%= i %>_out_<%= j %> (ark (at <%= j %> inputs) (getConstant <%= i %>)))
                            <% } else { %>
                            (ark_<%= i %>_out_<%= j %> (ark 0 (getConstant <%= i %>)))
                            <% }
                        } else { %>
                            (ark_<%= i %>_in_<%= j %> (mix mix_<%= i-1 %>_in_0 mix_<%= i-1 %>_in_1 mix_<%= i-1 %>_in_2 <%=j%>))
                            (ark_<%= i %>_out_<%= j %> (ark ark_<%= i %>_in_<%= j %> (getConstant <%= i %>)))
                        <% }
                    }
                    if ((i<(parseInt(nRoundsF)/2)) || (i>= (parseInt(nRoundsP) + parseInt(nRoundsF)/2))) {
                        for(let j = 0; j < t; j++) { %>
                            (mix_<%= i %>_in_<%= j %> (sigma ark_<%= i %>_out_<%=j%>))
                        <% }
                    } else { %>
                            (mix_<%= i %>_in_0 (sigma ark_<%= i %>_out_0))
                        <% for(let j = 1; j < t; j++) { %> 
                            (mix_<%= i %>_in_<%= j %> ark_<%= i %>_out_<%= j %>)
                        <% }
                    }
                }
                (roundIndex = (parseInt(nRoundsF) + (parseInt(nRoundsP) - 1))) %>
                (mix_<%= roundIndex %>_out_0 (mix mix_<%= roundIndex %>_in_0 mix_<%= roundIndex %>_in_1 mix_<%= roundIndex %>_in_2 0))
                (out mix_<%= roundIndex %>_out_0)
            )
            out
        )
    )
)