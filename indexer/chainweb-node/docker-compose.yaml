version: '3.9'

networks:
  indexer: {}

volumes:
  chainweb-config: {}
  chainweb-db: {}

services:

  # ########################################################################## #
  # Database Initialization
  chainweb-initialize-db:
    restart: "no"
    container_name: chainweb-initialize-db
    image: larsk/rsync
    volumes:
      - chainweb-db:/db:rw
    env_file:
      - .env
    entrypoint: "/bin/sh"
    command:
      - "-c"
      - |
        apk add --no-cache curl rsync
        mkdir -p "/chainweb/db/0" && \
        curl -L -o db-chainweb-node-ubuntu.18.04-latest.tar.gz "https://kadena-node-db.s3.us-east-2.amazonaws.com/db-chainweb-node-ubuntu.18.04-latest.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYX5GBYQTUK5ITNWH%2F20231022%2Fus-east-2%2Fs3%2Faws4_request&X-Amz-Date=20231022T235452Z&X-Amz-Expires=604800&X-Amz-Signature=142c1ba609905903d23855fe1ae15c7d8a5ed56ef4b36b7df589317b9ede390b&X-Amz-SignedHeaders=host%3Bx-amz-request-payer&x-amz-request-payer=requester" && \
        tar -xzC "/chainweb/db/0" -f db-chainweb-node-ubuntu.18.04-latest.tar.gz && \
        exit 0

  # ########################################################################## #
  # Database Validation

  chainweb-validate-db-config:
    container_name: chainweb-validate-db-config
    image: alpine:latest
    environment:
      KADENA_NETWORK: ${KADENA_NETWORK:-mainnet01}
    volumes:
      - chainweb-config:/config:rw
    entrypoint: "/bin/sh"
    command:
      - "-c"
      - |
        cat > /config/chainweb-validate-db-config.yaml <<EOF
        databaseDirectory: /chainweb/db
        chainweb:
          allowReadsInLocal: true
          headerStream: true
          throttling:
            global: 1000
          version: ${KADENA_NETWORK}
          onlySyncPact: true
          validateHashesOnReplay: true
          transactionIndex:
            enabled: false
          mempoolP2p:
            enabled: false
          cuts:
            pruneChainDatabase: headers-checked

        logging:
          telemetryBackend:
            enabled: true
            configuration:
              handle: stdout
              color: auto
              format: text

          backend:
            handle: stdout
            color: auto
            format: text

          logger:
            log_level: info

          filter:
            rules:
            - value: mempool
              key: component
              level: warn
            - value: connection-manager
              key: component
              level: warn
            - value: sync
              key: sub-component
              level: warn
            - value: MempoolAccess
              key: sub-component
              level: warn
            - value: PactService
              key: logger
              level: warn
            - value: Checkpointer
              key: logger
              level: warn
            default: info
        EOF

  # ########################################################################## #
  # Chainweb Node
  chainweb-node:
    container_name: chainweb-node
    image: ${IMAGE:-ghcr.io/kadena-io/chainweb-node/ubuntu:latest}
    environment:
      KADENA_NETWORK: ${KADENA_NETWORK:-mainnet01}
    restart: unless-stopped
    stop_grace_period: "20s"
    stop_signal: SIGINT
    depends_on:
      chainweb-initialize-db:
        condition: "service_completed_successfully"
      chainweb-validate-db-config:
        condition: "service_completed_successfully"
    ulimits:
      nofile:
        hard: 65535
        soft: 65535
    ports:
      - mode: host
        protocol: tcp
        published: ${P2P_PORT:-1789}
        target: 1789
      - mode: host
        protocol: tcp
        published: ${SERVICE_PORT:-1848}
        target: 1848
    volumes:
      - chainweb-db:/chainweb/db:rw
      - chainweb-config:/config:ro
    deploy:
      restart_policy:
        condition: on-failure
        delay: "5s"
        max_attempts: 3
        window: "120s"
      update_config:
        delay: "60s"
        order: stop-first
    entrypoint:
      - /chainweb/chainweb-node
    command:
      - +RTS
      - -T
      - -H1G
      - -A64M
      - -RTS
      - --header-stream
      - --database-directory=/chainweb/db
      - --chainweb-version=${KADENA_NETWORK:-mainnet01}
      - --log-level=warn
      - --log-handle=stdout
      - --log-format=json
      - --telemetry-log-handle=stderr
      - --telemetry-log-format=json
      - --rosetta
      - --p2p-port=1789
    healthcheck:
      interval: "1m"
      retries: 3
      start_period: "30s"
      test:
      - CMD
      - /bin/bash
      - "-c"
      - "set -e; while : ; do /bin/bash -c \"$$1\" ; shift || break ; done"
      - '--'
      - |
        # check health endpoint
        exec 3<>/dev/tcp/localhost/1848
        printf "GET /health-check HTTP/1.1\r\nhost: http://localhost:1848\r\nConnection: close\r\n\r\n" >&3
        grep -q "200 OK" <&3 || exit 1
      timeout: "10s"

  # ########################################################################## #
  # Container Monitor

  container-monitor:
    container_name: container-monitor
    environment:
      AUTOHEAL_CONTAINER_LABEL: all
    image: willfarrell/autoheal
    restart: unless-stopped
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock

  # ########################################################################## #
  # Debugging

  debug:
    image: alpine:latest
    entrypoint:
    - /bin/sh
    profiles:
    - debug
